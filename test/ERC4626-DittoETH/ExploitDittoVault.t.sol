// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../../src/ERC4626-DittoETH/DittoVulnerableVault.sol";

contract ExploitTest is Test {
    DittoVulnerableVault public vault;
    address public attacker = address(0x1337);
    address[4] public otherUsers;

    function setUp() public {
        // Deploy the VulnerableVault contract
        vault = new DittoVulnerableVault();

        // Setup other users
        otherUsers[0] = address(0x1);
        otherUsers[1] = address(0x2);
        otherUsers[2] = address(0x3);
        otherUsers[3] = address(0x4);

        // Other users deposit funds
        for (uint i = 0; i < 4; i++) {
            vm.prank(otherUsers[i]);
            vault.deposit(100 ether);
        }
    }

    function testExploit() public {
        uint256 initialBalance = vault.balances(attacker);
        uint256 initialTotalSupply = vault.totalSupply();

        vm.startPrank(attacker);

        // TODO: CODE YOUR EXPLOIT HERE
        // HINT: Pay close attention to how fees are calculated.

        vm.stopPrank();

        // Victory check
        assertTrue(vault.checkVictory(attacker, initialBalance, attackerBalance));

        // Print the results
        uint256 profit = attackerBalance - 500 ether;
        console.log("Initial total supply:", initialTotalSupply);
        console.log("Attacker's final balance:", attackerBalance);
        console.log("Profit:", profit);
        console.log("Profit percentage of initial total supply:", (profit * 100) / initialTotalSupply, "%");
    }
}
